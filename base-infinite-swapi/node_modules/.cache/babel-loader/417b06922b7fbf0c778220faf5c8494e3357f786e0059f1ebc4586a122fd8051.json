{"ast":null,"code":"var _jsxFileName = \"/Users/leeheejun/Desktop/query/base-infinite-swapi/src/species/InfiniteSpecies.jsx\",\n  _s = $RefreshSig$();\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Species } from './Species';\nimport { useInfiniteQuery } from 'react-query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialUrl = 'https://swapi.dev/api/species/';\nconst fetchUrl = async url => {\n  const response = await fetch(url);\n  return response.json();\n};\nexport function InfiniteSpecies() {\n  _s();\n  const {\n    data,\n    isLoading,\n    isFetching,\n    isError,\n    error,\n    fetchNextPage,\n    hasNextPage\n  } = useInfiniteQuery('sw-species', _ref => {\n    let {\n      pageParam = initialUrl\n    } = _ref;\n    return fetchUrl(pageParam);\n  },\n  // 위 쿼리 함수는 useInfiniteQuery의 pageParam을 쓰는데 initialUrl에서 시작하여 pageParam값으로 fetchUrl을 실행한다.\n  {\n    getNextPageParam: lastPage => lastPage.next || undefined\n    // getNextPageParam는 이전페이지의 다음 프로퍼티를 불러와서 새 페이지 데이터가 있을 때마다 pageParam에 지정 해준다.\n  });\n\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 25\n  }, this);\n  if (isError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error!\", error.toString()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isFetching && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      loadMore: fetchNextPage,\n      hasMore: hasNextPage,\n      children: [' ', data.pages.map(pageData => {\n        return pageData.results.map(species => {\n          return /*#__PURE__*/_jsxDEV(Species, {\n            name: species.name,\n            language: species.language,\n            averageLifespan: species.averageLifespan\n          }, species.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this);\n        });\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(InfiniteSpecies, \"3AMVhrm3v/p+SdYNRF+GMFObUqs=\", false, function () {\n  return [useInfiniteQuery];\n});\n_c = InfiniteSpecies;\nvar _c;\n$RefreshReg$(_c, \"InfiniteSpecies\");","map":{"version":3,"names":["InfiniteScroll","Species","useInfiniteQuery","initialUrl","fetchUrl","url","response","fetch","json","InfiniteSpecies","data","isLoading","isFetching","isError","error","fetchNextPage","hasNextPage","pageParam","getNextPageParam","lastPage","next","undefined","toString","pages","map","pageData","results","species","name","language","averageLifespan"],"sources":["/Users/leeheejun/Desktop/query/base-infinite-swapi/src/species/InfiniteSpecies.jsx"],"sourcesContent":["import InfiniteScroll from 'react-infinite-scroller';\nimport { Species } from './Species';\nimport { useInfiniteQuery } from 'react-query';\n\nconst initialUrl = 'https://swapi.dev/api/species/';\nconst fetchUrl = async (url) => {\n  const response = await fetch(url);\n  return response.json();\n};\n\nexport function InfiniteSpecies() {\n  const {\n    data,\n    isLoading,\n    isFetching,\n    isError,\n    error,\n    fetchNextPage,\n    hasNextPage,\n  } = useInfiniteQuery(\n    'sw-species',\n    ({ pageParam = initialUrl }) => fetchUrl(pageParam),\n    // 위 쿼리 함수는 useInfiniteQuery의 pageParam을 쓰는데 initialUrl에서 시작하여 pageParam값으로 fetchUrl을 실행한다.\n    {\n      getNextPageParam: (lastPage) => lastPage.next || undefined,\n      // getNextPageParam는 이전페이지의 다음 프로퍼티를 불러와서 새 페이지 데이터가 있을 때마다 pageParam에 지정 해준다.\n    }\n  );\n\n  if (isLoading) return <div className=\"loading\">Loading...</div>;\n  if (isError) return <div>Error!{error.toString()}</div>;\n  return (\n    <>\n      {isFetching && <div className=\"loading\">Loading...</div>}\n      <InfiniteScroll loadMore={fetchNextPage} hasMore={hasNextPage}>\n        {' '}\n        {/* hasMore함수는 infiniteScroll 컴포넌트가 계속 데이터를 불러올지를 결정하는 역할을 한다.*/}\n        {data.pages.map((pageData) => {\n          return pageData.results.map((species) => {\n            return (\n              <Species\n                key={species.name}\n                name={species.name}\n                language={species.language}\n                averageLifespan={species.averageLifespan}\n              />\n            );\n          });\n        })}\n      </InfiniteScroll>\n    </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,cAAc,MAAM,yBAAyB;AACpD,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,gBAAgB,QAAQ,aAAa;AAAC;AAAA;AAE/C,MAAMC,UAAU,GAAG,gCAAgC;AACnD,MAAMC,QAAQ,GAAG,MAAOC,GAAG,IAAK;EAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EACjC,OAAOC,QAAQ,CAACE,IAAI,EAAE;AACxB,CAAC;AAED,OAAO,SAASC,eAAe,GAAG;EAAA;EAChC,MAAM;IACJC,IAAI;IACJC,SAAS;IACTC,UAAU;IACVC,OAAO;IACPC,KAAK;IACLC,aAAa;IACbC;EACF,CAAC,GAAGd,gBAAgB,CAClB,YAAY,EACZ;IAAA,IAAC;MAAEe,SAAS,GAAGd;IAAW,CAAC;IAAA,OAAKC,QAAQ,CAACa,SAAS,CAAC;EAAA;EACnD;EACA;IACEC,gBAAgB,EAAGC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,IAAIC;IACjD;EACF,CAAC,CACF;;EAED,IAAIV,SAAS,EAAE,oBAAO;IAAK,SAAS,EAAC,SAAS;IAAA,UAAC;EAAU;IAAA;IAAA;IAAA;EAAA,QAAM;EAC/D,IAAIE,OAAO,EAAE,oBAAO;IAAA,WAAK,QAAM,EAACC,KAAK,CAACQ,QAAQ,EAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAAO;EACvD,oBACE;IAAA,WACGV,UAAU,iBAAI;MAAK,SAAS,EAAC,SAAS;MAAA,UAAC;IAAU;MAAA;MAAA;MAAA;IAAA,QAAM,eACxD,QAAC,cAAc;MAAC,QAAQ,EAAEG,aAAc;MAAC,OAAO,EAAEC,WAAY;MAAA,WAC3D,GAAG,EAEHN,IAAI,CAACa,KAAK,CAACC,GAAG,CAAEC,QAAQ,IAAK;QAC5B,OAAOA,QAAQ,CAACC,OAAO,CAACF,GAAG,CAAEG,OAAO,IAAK;UACvC,oBACE,QAAC,OAAO;YAEN,IAAI,EAAEA,OAAO,CAACC,IAAK;YACnB,QAAQ,EAAED,OAAO,CAACE,QAAS;YAC3B,eAAe,EAAEF,OAAO,CAACG;UAAgB,GAHpCH,OAAO,CAACC,IAAI;YAAA;YAAA;YAAA;UAAA,QAIjB;QAEN,CAAC,CAAC;MACJ,CAAC,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QACa;EAAA,gBAChB;AAEP;AAAC,GA1CenB,eAAe;EAAA,QASzBP,gBAAgB;AAAA;AAAA,KATNO,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}