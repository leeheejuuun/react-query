{"ast":null,"code":"var _jsxFileName = \"/Users/leeheejun/Desktop/query/base-blog-em/src/PostDetail.jsx\",\n  _s = $RefreshSig$();\nimport { useQuery, useMutation } from 'react-query'; // 설명 : 서버에서 데이터를 가져올 때 사용하는 훅\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function fetchComments(postId) {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/comments?postId=${postId}`);\n  return response.json();\n}\nasync function deletePost(postId) {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/postId/${postId}`, {\n    method: 'DELETE'\n  });\n  return response.json();\n}\nasync function updatePost(postId) {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/postId/${postId}`, {\n    method: 'PATCH',\n    data: {\n      title: 'REACT QUERY FOREVER!!!!'\n    }\n  });\n  return response.json();\n}\nexport function PostDetail(_ref) {\n  _s();\n  let {\n    post\n  } = _ref;\n  // replace with useQuery\n  const {\n    data,\n    isError,\n    isLoading,\n    error\n  } = useQuery(['comments', post.id],\n  //  post.id는 의존성 배열 처럼 작동한다. 문자열 'comments' 에 식별자가 추가된 셈이다.\n  () => fetchComments(post.id));\n  const deleteMutation = useMutation(postId => deletePost(postId));\n  const updateMutation = useMutation(postId => updatePost(postId));\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 25\n  }, this);\n  if (isError) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error.toString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        color: 'blue'\n      },\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => deleteMutation.mutate(post.id),\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), deleteMutation.isError && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: \"Error deleting the post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), deleteMutation.isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'purple'\n      },\n      children: \"Deleting the post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), deleteMutation.isSuccess && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'green'\n      },\n      children: \"Post has (not) been deleted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Update title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), data.map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [comment.email, \": \", comment.body]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}\n_s(PostDetail, \"NX/ufVWfZOKsglnyjitFI9FgQhU=\", false, function () {\n  return [useQuery, useMutation, useMutation];\n});\n_c = PostDetail;\nvar _c;\n$RefreshReg$(_c, \"PostDetail\");","map":{"version":3,"names":["useQuery","useMutation","fetchComments","postId","response","fetch","json","deletePost","method","updatePost","data","title","PostDetail","post","isError","isLoading","error","id","deleteMutation","updateMutation","toString","color","mutate","isSuccess","body","map","comment","email"],"sources":["/Users/leeheejun/Desktop/query/base-blog-em/src/PostDetail.jsx"],"sourcesContent":["import { useQuery, useMutation } from 'react-query'; // 설명 : 서버에서 데이터를 가져올 때 사용하는 훅\n\nasync function fetchComments(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/comments?postId=${postId}`\n  );\n  return response.json();\n}\n\nasync function deletePost(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/postId/${postId}`,\n    { method: 'DELETE' }\n  );\n  return response.json();\n}\n\nasync function updatePost(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/postId/${postId}`,\n    { method: 'PATCH', data: { title: 'REACT QUERY FOREVER!!!!' } }\n  );\n  return response.json();\n}\n\nexport function PostDetail({ post }) {\n  // replace with useQuery\n  const { data, isError, isLoading, error } = useQuery(\n    ['comments', post.id], //  post.id는 의존성 배열 처럼 작동한다. 문자열 'comments' 에 식별자가 추가된 셈이다.\n    () => fetchComments(post.id)\n  );\n\n  const deleteMutation = useMutation((postId) => deletePost(postId));\n\n  const updateMutation = useMutation((postId) => updatePost(postId));\n\n  if (isLoading) return <h3>Loading...</h3>;\n  if (isError)\n    return (\n      <>\n        <h3>Error</h3>\n        <p>{error.toString()}</p>\n      </>\n    );\n  return (\n    <>\n      <h3 style={{ color: 'blue' }}>{post.title}</h3>\n      <button onClick={() => deleteMutation.mutate(post.id)}>Delete</button>\n      {deleteMutation.isError && (\n        <p style={{ color: 'red' }}>Error deleting the post</p>\n      )}\n      {deleteMutation.isLoading && (\n        <p style={{ color: 'purple' }}>Deleting the post</p>\n      )}\n      {deleteMutation.isSuccess && (\n        <p style={{ color: 'green' }}>Post has (not) been deleted</p>\n      )}\n      <button>Update title</button>\n      <p>{post.body}</p>\n      <h4>Comments</h4>\n      {data.map((comment) => (\n        <li key={comment.id}>\n          {comment.email}: {comment.body}\n        </li>\n      ))}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}