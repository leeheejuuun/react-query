{"ast":null,"code":"var _jsxFileName = \"/Users/leeheejun/Desktop/query/base-blog-em/src/Posts.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useQuery, useQueryClient } from 'react-query'; // 설명 : 서버에서 데이터를 가져올 때 사용하는 훅\n\nimport { PostDetail } from './PostDetail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst maxPostPage = 10;\nasync function fetchPosts(pageNum) {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/posts?_limit=10&_page=${pageNum}`);\n  return response.json();\n}\nexport function Posts() {\n  _s();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedPost, setSelectedPost] = useState(null);\n  const queryClient = useQueryClient();\n  useEffect(() => {\n    if (currentPage < maxPostPage) {\n      // 설명 : 9페이지 이전에는 프리페칭이 이루어지지만 10페이지에 있다면 미리 가져올 데이터가 없을것이다.\n      const nextPage = currentPage + 1;\n      queryClient.prefetchQuery(['posts', nextPage], () => fetchPosts(nextPage)); // 설명 : prefetchQuery의 인자는 useQuery의 인자와 비슷하다.\n    }\n  }, [currentPage, queryClient]);\n\n  // const data = [];\n\n  // 설명 : 위 const data = []; 코드를 아래처럼 useQuery로 data를 구조 분해한다.\n  // 설명 : useQuery의 첫 번째 인자는 쿼리 키 이다.\n  //       두 번째 인자는 쿼리에 대한 데이터를 가져오는 방법 즉, 함수를 의미한다. (비동기 함수여야 함)\n  //       세 번째 인자는 옵션이며 staleTime이다. 1/1000초 단위이다.\n\n  const {\n    data,\n    isError,\n    error,\n    isLoading,\n    isFetching\n  } = useQuery(['posts', currentPage],\n  // 의존성 배열에 넣음으로 써 쿼리 키가 바뀔때마다 데이터패칭을 한다.\n  () => fetchPosts(currentPage), {\n    staleTime: 2000,\n    keepPreviousData: true // 설명 : query키가 바뀔 때도 지난 데이터를 유지해서 혹여나 이전 페이지로 돌아갔을 때 케시에 해당 데이터가 있도록 하는 기능\n  });\n\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 25\n  }, this); // 설명 : 데이터를 가져오는 중 fetchPosts함수가 실행 중이면서 캐시된 데이터가 존재하지 않을 때 isLoading이 참이 된다.\n  // if (isFetching) return <h3>Loading...</h3>; // 설명 : 이 경우에는 캐시된 데이터의 존재 여부와 관계없이 로딩을 나타낼 것이다. 프리페치 전에 행동할 것이다. (즉, 다음장의 데이터를 포함한 캐시를 미리 가져오기 전)\n  if (isError) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Error.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error.toString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"post-title\",\n        onClick: () => setSelectedPost(post),\n        children: post.title\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pages\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: currentPage <= 1,\n        onClick: () => {\n          setCurrentPage(prev => prev - 1);\n        },\n        children: \"Previous page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page \", currentPage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: currentPage >= maxPostPage,\n        onClick: () => {\n          setCurrentPage(prev => prev + 1);\n        },\n        children: \"Next page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), selectedPost && /*#__PURE__*/_jsxDEV(PostDetail, {\n      post: selectedPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true);\n}\n_s(Posts, \"2BIWRnPjKHRsjVX+1u7EnB4qhns=\", false, function () {\n  return [useQueryClient, useQuery];\n});\n_c = Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["useEffect","useState","useQuery","useQueryClient","PostDetail","maxPostPage","fetchPosts","pageNum","response","fetch","json","Posts","currentPage","setCurrentPage","selectedPost","setSelectedPost","queryClient","nextPage","prefetchQuery","data","isError","error","isLoading","isFetching","staleTime","keepPreviousData","toString","map","post","title","id","prev"],"sources":["/Users/leeheejun/Desktop/query/base-blog-em/src/Posts.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useQuery, useQueryClient } from 'react-query'; // 설명 : 서버에서 데이터를 가져올 때 사용하는 훅\n\nimport { PostDetail } from './PostDetail';\nconst maxPostPage = 10;\n\nasync function fetchPosts(pageNum) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/posts?_limit=10&_page=${pageNum}`\n  );\n  return response.json();\n}\n\nexport function Posts() {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedPost, setSelectedPost] = useState(null);\n\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (currentPage < maxPostPage) {\n      // 설명 : 9페이지 이전에는 프리페칭이 이루어지지만 10페이지에 있다면 미리 가져올 데이터가 없을것이다.\n      const nextPage = currentPage + 1;\n      queryClient.prefetchQuery(['posts', nextPage], () =>\n        fetchPosts(nextPage)\n      ); // 설명 : prefetchQuery의 인자는 useQuery의 인자와 비슷하다.\n    }\n  }, [currentPage, queryClient]);\n\n  // const data = [];\n\n  // 설명 : 위 const data = []; 코드를 아래처럼 useQuery로 data를 구조 분해한다.\n  // 설명 : useQuery의 첫 번째 인자는 쿼리 키 이다.\n  //       두 번째 인자는 쿼리에 대한 데이터를 가져오는 방법 즉, 함수를 의미한다. (비동기 함수여야 함)\n  //       세 번째 인자는 옵션이며 staleTime이다. 1/1000초 단위이다.\n\n  const { data, isError, error, isLoading, isFetching } = useQuery(\n    ['posts', currentPage], // 의존성 배열에 넣음으로 써 쿼리 키가 바뀔때마다 데이터패칭을 한다.\n    () => fetchPosts(currentPage),\n    {\n      staleTime: 2000,\n      keepPreviousData: true, // 설명 : query키가 바뀔 때도 지난 데이터를 유지해서 혹여나 이전 페이지로 돌아갔을 때 케시에 해당 데이터가 있도록 하는 기능\n    }\n  );\n\n  if (isLoading) return <h3>Loading...</h3>; // 설명 : 데이터를 가져오는 중 fetchPosts함수가 실행 중이면서 캐시된 데이터가 존재하지 않을 때 isLoading이 참이 된다.\n  // if (isFetching) return <h3>Loading...</h3>; // 설명 : 이 경우에는 캐시된 데이터의 존재 여부와 관계없이 로딩을 나타낼 것이다. 프리페치 전에 행동할 것이다. (즉, 다음장의 데이터를 포함한 캐시를 미리 가져오기 전)\n  if (isError)\n    return (\n      <>\n        <h3>Error.</h3>\n        <p>{error.toString()}</p>\n      </>\n    );\n\n  return (\n    <>\n      <ul>\n        {/*설명 : 여기서 우리가 맵핑한 데이터는 위 fetchPosts함수의 HTTP요청에서 반환된 JSON이 된다.*/}\n        {data.map((post) => (\n          <li\n            key={post.id}\n            className=\"post-title\"\n            onClick={() => setSelectedPost(post)}\n          >\n            {post.title}\n          </li>\n        ))}\n      </ul>\n      <div className=\"pages\">\n        <button\n          disabled={currentPage <= 1}\n          onClick={() => {\n            setCurrentPage((prev) => prev - 1);\n          }}\n        >\n          Previous page\n        </button>\n        <span>Page {currentPage}</span>\n        <button\n          disabled={currentPage >= maxPostPage}\n          onClick={() => {\n            setCurrentPage((prev) => prev + 1);\n          }}\n        >\n          Next page\n        </button>\n      </div>\n      <hr />\n      {selectedPost && <PostDetail post={selectedPost} />}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}